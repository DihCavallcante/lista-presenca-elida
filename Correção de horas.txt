// =================== üõ†Ô∏è BOT√ÉO DE CORRE√á√ÉO COM DEBUG ===================
if (btnRelatorios) {
  const btnCorrigir = document.createElement('button');
  btnCorrigir.className = 'btn ghost';
  btnCorrigir.innerHTML = 'üõ†Ô∏è Corrigir Datas';
  btnCorrigir.style.cssText = 'background: #ff9800 !important; color: white !important;';
  
  btnRelatorios.parentNode.insertBefore(btnCorrigir, btnRelatorios.nextSibling);
  
  btnCorrigir.addEventListener('click', async () => {
    console.log('üîµ Bot√£o clicado!');
    
    if (!auth.currentUser) {
      console.error('‚ùå Usu√°rio n√£o est√° logado!');
      mostrarNotificacao('‚ùå Voc√™ precisa estar logado!', 'error');
      return;
    }
    
    console.log('‚úÖ Usu√°rio logado:', auth.currentUser.email);
    
    if (!confirm('‚ö†Ô∏è Corrigir datas da madrugada?')) {
      console.log('‚ùå Usu√°rio cancelou');
      return;
    }
    
    btnCorrigir.textContent = '‚è≥ Aguarde...';
    btnCorrigir.disabled = true;
    
    try {
      console.log('üîµ Buscando registros...');
      const snap = await getDocs(collection(db, 'presencas'));
      console.log('üìã Total de registros:', snap.docs.length);
      
      let corrigidos = 0;
      let tentativas = 0;
      
      for (const docSnap of snap.docs) {
        const dados = docSnap.data();
        const dataAtual = dados.data;
        const horaAtual = dados.hora;
        
        if (!dataAtual || !horaAtual) continue;
        
        const horaNum = parseInt(horaAtual.substring(0, 2));
        
        if (horaNum >= 0 && horaNum <= 5) {
          tentativas++;
          console.log(`üåô Registro ${tentativas}:`, {
            id: docSnap.id,
            nome: dados.nome,
            dataAtual,
            horaAtual
          });
          
          const [d, m, a] = dataAtual.split('/');
          const dataObj = new Date(parseInt(a), parseInt(m) - 1, parseInt(d));
          dataObj.setDate(dataObj.getDate() + 1);
          
          const novoDia = String(dataObj.getDate()).padStart(2, '0');
          const novoMes = String(dataObj.getMonth() + 1).padStart(2, '0');
          const novoAno = dataObj.getFullYear();
          const novaData = `${novoDia}/${novoMes}/${novoAno}`;
          
          console.log(`üîÑ Tentando atualizar para: ${novaData}`);
          
          try {
            const docRef = doc(db, 'presencas', docSnap.id);
            await updateDoc(docRef, {
              data: novaData
            });
            console.log('‚úÖ Atualizado com sucesso!');
            corrigidos++;
          } catch (updateErr) {
            console.error('‚ùå Erro ao atualizar este registro:', updateErr);
            console.error('C√≥digo:', updateErr.code);
            console.error('Mensagem:', updateErr.message);
          }
        }
      }
      
      console.log(`üìä Resultado: ${corrigidos} de ${tentativas} atualizados`);
      
      btnCorrigir.textContent = 'üõ†Ô∏è Corrigir Datas';
      btnCorrigir.disabled = false;
      
      if (corrigidos > 0) {
        mostrarNotificacao(`‚úÖ ${corrigidos} registros corrigidos!`, 'success');
        setTimeout(() => {
          console.log('üîÑ Recarregando lista...');
          listarPresencas();
        }, 1500);
      } else if (tentativas > 0) {
        mostrarNotificacao(`‚ùå Nenhum registro foi atualizado (${tentativas} tentativas)`, 'error');
      } else {
        mostrarNotificacao('‚ÑπÔ∏è Nenhum registro de madrugada encontrado', 'info');
      }
      
    } catch (err) {
      console.error('‚ùå ERRO GERAL:', err);
      console.error('C√≥digo:', err.code);
      console.error('Mensagem:', err.message);
      console.error('Stack:', err.stack);
      mostrarNotificacao('‚ùå Erro: ' + err.message, 'error');
      btnCorrigir.textContent = 'üõ†Ô∏è Corrigir Datas';
      btnCorrigir.disabled = false;
    }
  });
}